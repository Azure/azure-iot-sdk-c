// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.


#ifndef IOTHUB_PROPERTIES_H
#define IOTHUB_PROPERTIES_H

#include "iothub_client_core_common.h"

#define IOTHUB_PROPERTY_REPORTED_VERSION 1

/** @brief    This struct defines properties reported from the device.  This corresponds to what DTDLv2 calls a "read-only property." */
typedef struct IOTHUB_PROPERTY_REPORTED_TAG {
    /** @brief   Version of the structure.  Currently must be IOTHUB_PROPERTY_REPORTED_VERSION. */
    int version;
    /** @brief    The name of the property. */
    const char* name;
    /** @brief    The value of the property. */
    const char* value;
} IOTHUB_PROPERTY_REPORTED;

#define IOTHUB_PROPERTY_RESPONSE_VERSION_1 1

/** @brief    This struct represents the response to a writeable property that the device will return.  
              This structure is filled out by the application and can be serialized into a payload for the network via IoTHub_Serialize_ResponseProperties. */
typedef struct {
    /** @brief    Version of the structure.  Currently must be IOTHUB_PROPERTY_RESPONSE_VERSION_1.  */
    int version;
    /** @brief Name of the property. */
    const char* propertyName;
    /** @brief Value of the property. */
    const char* propertyValue;
    /** @brief Result of the requested operation.  This maps to an HTTP status code.  */
    int result;
    /** @brief Optional friendly description of the operation.  May be NULL. */
    const char* description;
    /** @brief Acknowledgement version.  This corresponds to the version of the writeable properties being responded to.  
        If you use IoTHub_Deserialize_Properties to deserialize writeable properties, set the propertiesVersion it returns in this field  */
    int ackVersion;
} IOTHUB_PROPERTY_RESPONSE;

/** @brief Enumeration that indicates whether a given property from the service was originally reported from the device
           (and hence the device application sees what the last reported value IoT Hub has)
           or whether this is a writeable property that the service is requesting configuration for.
*/
typedef enum IOTHUB_PROPERTY_TYPE_TAG 
{ 
    IOTHUB_PROPERTY_TYPE_REPORTED_FROM_DEVICE,
    IOTHUB_PROPERTY_TYPE_WRITEABLE
} IOTHUB_PROPERTY_TYPE;

#define IOTHUB_PROPERTY_DESERIALIZED_VERSION 1

/** @brief    This struct represents a property from the service.  
              It is generated by IoTHub_Deserialize_Properties while deserializing a property payload. */
typedef struct IOTHUB_PROPERTY_DESERIALIZED_TAG {
    /** @brief   Version of the structure.  Currently must be IOTHUB_PROPERTY_DESERIALIZED_VERSION. */
    int version;
    /** @brief   Whether this is a property the device reported (and we're seeing what IoT Hub last received from the device)
         or whether it's a writable property request from the device. */
    IOTHUB_PROPERTY_TYPE propertyType;
    /** @brief Name of the component.  Optional; may be NULL for the root component. */
    const char* componentName;
    /** @brief Name of the property. */
    const char* propertyName;
    /** @brief Value of the property. */
    const char* propertyValue;
} IOTHUB_PROPERTY_DESERIALIZED;


/**
* @brief   Serializes properties into a format for sending to IoT Hub.
*
* @param   properties                  Pointer to IOTHUB_PROPERTY_REPORTED to be serialized.
* @param   numProperties               Number of elements contained in @c properties.
* @param   componentName               Optional component name these properties are part of.  May be NULL for default component.
* @param   serializedProperties        Serialized output of @c properties for sending to IoT Hub.
                                       The application must release this memory using free().
* @param   serializedPropertiesLength  Length of serializedProperties.
*
* @remarks  Applications can also manually construct the payload based on the convention rules.  This API is an easier to use 
*           alternative, so the application can use the more convenient IOTHUB_PROPERTY_REPORTED structure instead of raw serialization.
* 
*           This API does not perform any network I/O.  It only translates IOTHUB_PROPERTY_REPORTED into a byte array.  Applications
*           should use APIs such as IoTHubDeviceClient_LL_SendPropertiesAsync to send the serialized data.
* 
* @return   IOTHUB_CLIENT_OK upon success or an error code upon failure.
*/
IOTHUB_CLIENT_RESULT IoTHub_Serialize_ReportedProperties(
    const IOTHUB_PROPERTY_REPORTED* properties, 
    size_t numProperties, 
    const char* componentName, 
    unsigned char** serializedProperties, 
    size_t* serializedPropertiesLength);

/**
* @brief   Serializes the response to writeable properties into a format for sending to IoT Hub.  
*
* @param   properties                  Pointer to IOTHUB_PROPERTY_RESPONSE to be serialized
* @param   numProperties               Number of elements contained in @c properties.
* @param   componentName               Optional component name these properties are part of.  May be NULL for default component.
* @param   serializedProperties        Serialized output of @c properties for sending to IoT Hub.
                                       The application must release this memory using free().
* @param   serializedPropertiesLength  Length of serializedProperties
* 
* @remarks  Applications typically will invoke this API when processing a property from service (IOTHUB_CLIENT_PROPERTIES_CALLBACK)
            to indicate whether properties have been accepted or rejected by the device.  For example, if the service requested
*           DesiredTemp=50, then the application could fill out the fields in an IOTHUB_PROPERTY_RESPONSE structure indicating whether
*           the request can be processed or whether there was a failure.
*
*           Applications can also manually construct the payload based on the convention rules.  This API is an easier to use 
*           alternative, so the application can use the more convenient IOTHUB_PROPERTY_RESPONSE structure instead of raw serialization.
*
*           This API does not perform any network I/O.  It only translates IOTHUB_PROPERTY_REPORTED into a byte array.  Applications
*           should use APIs such as IoTHubDeviceClient_LL_SendPropertiesAsync to send the serialized data.
*
* @return   IOTHUB_CLIENT_OK upon success or an error code upon failure.
*/
IOTHUB_CLIENT_RESULT IoTHub_Serialize_ResponseProperties(
    const IOTHUB_PROPERTY_RESPONSE* properties, 
    size_t numProperties, 
    const char* componentName, 
    unsigned char** serializedProperties, 
    size_t* serializedPropertiesLength);

/**
* @brief   Converts the raw payload of properties received from the service into IOTHUB_PROPERTY_DESERIALIZED struct(s).
*
* @param   payloadType                 Whether the received payload is the complete set of properties on the service or a more limited update.
* @param   payLoad                     Payload received from IoT Hub that requires deserialization.
* @param   payLoadLength               Number of bytes in payload.
* @param   componentsName              Optional array containing components that are supported by this client.  Can be NULL if only one component is supported.
* @param   numComponents               Number of components in the componentsName array.  Can be 0 if only one component is supported.
* @param   properties                  Array of IOTHUB_PROPERTY_DESERIALIZED representing a parsed version of payLoad.
* @param   numProperties               Number of array elements in @c properties.
* @param   propertiesVersion           Version of the properties that IoT Hub is monitoring.  This is required when responding to writeable 
* 
* @remarks   Applications typically will invoke this API when processing a writeable property update request (IOTHUB_CLIENT_PROPERTIES_CALLBACK)
*            so they don't need to manually parse a payload.  The application should pass @c payloadType,  @c payLoad, and @c payLoadLength from
*            their callback implementation directly to this function.
* 
*            This API does not perform any network I/O.  It only translates the @c payload received from IoT Hub into 
*            into the easier to manipulate @c IOTHUB_PROPERTY_DESERIALIZED.
*
* @return   IOTHUB_CLIENT_OK upon success or an error code upon failure.
*/
IOTHUB_CLIENT_RESULT IoTHub_Deserialize_Properties(
    IOTHUB_PROPERTY_PAYLOAD_TYPE payloadType, 
    const unsigned char* payLoad, 
    size_t payLoadLength, 
    const char** componentsName, 
    size_t numComponents, 
    IOTHUB_PROPERTY_DESERIALIZED** properties, 
    size_t* numProperties, 
    int* propertiesVersion);

#endif /* IOTHUB_PROPERTIES_H */
