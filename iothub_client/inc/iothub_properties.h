// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.


#ifndef IOTHUB_PROPERTIES_H
#define IOTHUB_PROPERTIES_H

#include "iothub_client_core_common.h"

/** @brief    This struct defines properties reported from the device. */
typedef struct {
    /** @brief    The name of the property. */
    const char* name;
    /** @brief    The value of the property. */
    const char* value;
} IOTHUB_PROPERTY;

/** @brief Enumeration that indicates whether a given property was reported from the device
           (and hence the device application sees what the last reported value IoT Hub has)
           or else this is a writeable property that the service is requesting configuration for.
*/
typedef enum IOTHUB_WRITABLE_PROPERTY_TYPE_TAG 
{ 
    IOTHUB_PROPERTY_TYPE_REPORTED_FROM_DEVICE,
    IOTHUB_PROPERTY_TYPE_WRITEABLE
} IOTHUB_PROPERTY_TYPE;

#define IOTHUB_WRITEABLE_PROPERTY_VERSION 1

/** @brief    This struct represents a writeable property from the service.  
              It is generated by IoTHub_Deserialize_WriteableProperty while deserializing a property payload from the twin and is not filled out by the application. */
typedef struct {
    /** @brief   Version of the structure.  Currently must be IOTHUB_WRITEABLE_PROPERTY_VERSION. */
    int version;
    /** @brief   Whether this is a property the device reported (and we're seeing what IoT Hub last received from the device)
         or whether it's a writable property request from the device */
    IOTHUB_PROPERTY_TYPE propertyType;
    /** @brief Name of the component.  Optional; may be NULL for the root component. */
    const char* componentName;
    /** @brief Name of the property */
    const char* propertyName;
    /** @brief Value of the property */
    const char* propertyValue;
} IOTHUB_WRITEABLE_PROPERTY; // TODO: How to reconcile IOTHUB_WRITEABLE_PROPERTY with fact that "regular" properties might come out too?  Maybe separate arrays from caller?


#define IOTHUB_WRITEABLE_PROPERTY_RESPONSE_VERSION 1

/** @brief    This struct represents the response to a writeable property that the device will return.  
              This structure is filled out by the application (typically in its IOTHUB_CLIENT_WRITEABLE_PROPERTY_CALLBACK callback) and can
              be serialized into a payload for the network via IoTHub_Serialize_ResponseToWriteableProperties. */
typedef struct {
    /** @brief    Version of the structure.  Currently must be IOTHUB_WRITEABLE_PROPERTY_RESPONSE_VERSION.  */
    int version;
    /** @brief Name of the property */
    const char* propertyName;
    /** @brief Value of the property */
    const char* propertyValue;
    /** @brief Result of the requested operation.  This maps to an HTTP status code.  */
    int result;
    /** @brief Optional friendly description of the operation.  May be NULL */
    const char* description;
    /** @brief Acknowledgement version.  This corresponds to the version of the writeable properties being responded to.  
        If you use IoTHub_Deserialize_WriteableProperty to deserialize writeable properties, set the propertiesVersion it returns in this field  */
    int ackVersion;
} IOTHUB_WRITEABLE_PROPERTY_RESPONSE;

/**
* @brief   Serializes properties into a format for sending to IoT Hub.
*
* @param   properties                  Pointer to IOTHUB_PROPERTY to be serialized
* @param   numProperties               Number of elements contained in @c properties.
* @param   componentName               Optional component name these properties are part of.  May be NULL for default component.
* @param   serializedProperties        Serialized output of @c properties for sending to IoT Hub.
                                       The application must release this memory using free().
* @param   serializedPropertiesLength  Length of serializedProperties
*
* @return   IOTHUB_CLIENT_OK upon success or an error code upon failure.
*/
IOTHUB_CLIENT_RESULT IoTHub_Serialize_Properties(
    const IOTHUB_PROPERTY* properties, 
    size_t numProperties, 
    const char* componentName, 
    unsigned char** serializedProperties, 
    size_t* serializedPropertiesLength);

/**
* @brief   Serializes the response to writeable properties into a format for sending to IoT Hub.
*
* @param   properties                  Pointer to IOTHUB_WRITEABLE_PROPERTY_RESPONSE to be serialized
* @param   numProperties               Number of elements contained in @c properties.
* @param   componentName               Optional component name these properties are part of.  May be NULL for default component.
* @param   serializedProperties        Serialized output of @c properties for sending to IoT Hub.
                                       The application must release this memory using free().
* @param   serializedPropertiesLength  Length of serializedProperties
* 
* @remarks  Applications typically will invoke this API when processing a writeable property update request (IOTHUB_CLIENT_WRITEABLE_PROPERTY_CALLBACK)
            to indicate whether properties have been accepted or rejected by the device.
*
* @return   IOTHUB_CLIENT_OK upon success or an error code upon failure.
*/
IOTHUB_CLIENT_RESULT IoTHub_Serialize_ResponseToWriteableProperties(
    const IOTHUB_WRITEABLE_PROPERTY_RESPONSE* properties, 
    size_t numProperties, 
    const char* componentName, 
    unsigned char** serializedProperties, 
    size_t* serializedPropertiesLength);


/**
* @brief   Converts payload from a property update into one or more IOTHUB_WRITEABLE_PROPERTY structs, which are easier to manipulate.
*
* @param   payloadType                 Whether to parse the payload as a complete or partial update.
* @param   payLoad                     Payload received from IoT Hub that requires deserialization.
* @param   payLoadLength               Number of bytes in payload
* @param   componentsName              Optional array containing components that are supported by this client.  Can be NULL if only one component is supported.
* @param   numComponents               Number of components in the componentsName array.  Can be 0 if only one component is supported.
* @param   writeableProperties         Array of IOTHUB_WRITEABLE_PROPERTY representing a parsed version of payLoad.
* @param   numWriteableProperties      Number of array elements in @c writeableProperties.
* @param   propertiesVersion           Version of the properties that IoT Hub is monitoring.  This is required when responding to writeable 
* 
* @remarks   Applications typically will invoke this API when processing a writeable property update request (IOTHUB_CLIENT_WRITEABLE_PROPERTY_CALLBACK)
*            so they don't need to manually parse a payload.  The application should pass @c payloadType,  @c payLoad, and @c payLoadLength from
*            their callback implementation directly to this function.
*
* @return   IOTHUB_CLIENT_OK upon success or an error code upon failure.
*/
IOTHUB_CLIENT_RESULT IoTHub_Deserialize_WriteableProperty(
    IOTHUB_WRITEABLE_PROPERTY_PAYLOAD_TYPE payloadType, 
    const unsigned char* payLoad, 
    size_t payLoadLength, 
    const char** componentsName, 
    size_t numComponents, 
    IOTHUB_WRITEABLE_PROPERTY** writeableProperties, 
    size_t* numWriteableProperties, 
    int* propertiesVersion);

#endif /* IOTHUB_PROPERTIES_H */
