"use strict";
/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var msRest = require("@azure/ms-rest-js");
var Mappers = require("../models/digitalTwinMappers");
var Parameters = require("../models/parameters");
/** Class representing a DigitalTwin. */
var DigitalTwin = /** @class */ (function () {
    /**
     * Create a DigitalTwin.
     * @param {IotHubGatewayServiceAPIs20190701PreviewContext} client Reference to the service client.
     */
    function DigitalTwin(client) {
        this.client = client;
    }
    DigitalTwin.prototype.getAllInterfaces = function (digitalTwinId, options, callback) {
        return this.client.sendOperationRequest({
            digitalTwinId: digitalTwinId,
            options: options
        }, getAllInterfacesOperationSpec, callback);
    };
    DigitalTwin.prototype.updateMultipleInterfaces = function (digitalTwinId, interfacesPatchInfo, options, callback) {
        return this.client.sendOperationRequest({
            digitalTwinId: digitalTwinId,
            interfacesPatchInfo: interfacesPatchInfo,
            options: options
        }, updateMultipleInterfacesOperationSpec, callback);
    };
    DigitalTwin.prototype.getSingleInterface = function (digitalTwinId, interfaceName, options, callback) {
        return this.client.sendOperationRequest({
            digitalTwinId: digitalTwinId,
            interfaceName: interfaceName,
            options: options
        }, getSingleInterfaceOperationSpec, callback);
    };
    DigitalTwin.prototype.invokeInterfaceCommand = function (digitalTwinId, interfaceName, commandName, payload, options, callback) {
        return this.client.sendOperationRequest({
            digitalTwinId: digitalTwinId,
            interfaceName: interfaceName,
            commandName: commandName,
            payload: payload,
            options: options
        }, invokeInterfaceCommandOperationSpec, callback);
    };
    DigitalTwin.prototype.getDigitalTwinModel = function (modelId, options, callback) {
        return this.client.sendOperationRequest({
            modelId: modelId,
            options: options
        }, getDigitalTwinModelOperationSpec, callback);
    };
    return DigitalTwin;
}());
exports.DigitalTwin = DigitalTwin;
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getAllInterfacesOperationSpec = {
    httpMethod: "GET",
    path: "digitalTwins/{digitalTwinId}/interfaces",
    urlParameters: [
        Parameters.digitalTwinId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DigitalTwinInterfaces,
            headersMapper: Mappers.DigitalTwinGetAllInterfacesHeaders
        },
        "default": {}
    },
    serializer: serializer
};
var updateMultipleInterfacesOperationSpec = {
    httpMethod: "PATCH",
    path: "digitalTwins/{digitalTwinId}/interfaces",
    urlParameters: [
        Parameters.digitalTwinId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.ifMatch
    ],
    requestBody: {
        parameterPath: "interfacesPatchInfo",
        mapper: __assign({}, Mappers.DigitalTwinInterfacesPatch, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.DigitalTwinInterfaces,
            headersMapper: Mappers.DigitalTwinUpdateMultipleInterfacesHeaders
        },
        "default": {}
    },
    serializer: serializer
};
var getSingleInterfaceOperationSpec = {
    httpMethod: "GET",
    path: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}",
    urlParameters: [
        Parameters.digitalTwinId,
        Parameters.interfaceName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DigitalTwinInterfaces,
            headersMapper: Mappers.DigitalTwinGetSingleInterfaceHeaders
        },
        "default": {}
    },
    serializer: serializer
};
var invokeInterfaceCommandOperationSpec = {
    httpMethod: "POST",
    path: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}/commands/{commandName}",
    urlParameters: [
        Parameters.digitalTwinId,
        Parameters.interfaceName,
        Parameters.commandName
    ],
    queryParameters: [
        Parameters.responseTimeoutInSeconds,
        Parameters.connectTimeoutInSeconds,
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: "payload",
        mapper: {
            required: true,
            serializedName: "payload",
            type: {
                name: "Object"
            }
        }
    },
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            },
            headersMapper: Mappers.DigitalTwinInvokeInterfaceCommandHeaders
        },
        "default": {}
    },
    serializer: serializer
};
var getDigitalTwinModelOperationSpec = {
    httpMethod: "GET",
    path: "digitalTwins/models/{modelId}",
    urlParameters: [
        Parameters.modelId
    ],
    queryParameters: [
        Parameters.expand,
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: {
                serializedName: "parsedResponse",
                type: {
                    name: "Object"
                }
            },
            headersMapper: Mappers.DigitalTwinGetDigitalTwinModelHeaders
        },
        "default": {}
    },
    serializer: serializer
};
