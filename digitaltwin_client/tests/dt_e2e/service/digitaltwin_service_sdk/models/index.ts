/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClientOptions } from "@azure/ms-rest-js";
import * as msRest from "@azure/ms-rest-js";


/**
 * @interface
 * An interface representing DesiredState.
 */
export interface DesiredState {
  /**
   * @member {number} [code] Status code for the operation.
   */
  code?: number;
  /**
   * @member {number} [subCode] Sub status code for the status.
   */
  subCode?: number;
  /**
   * @member {number} [version] Version of the desired value received.
   */
  version?: number;
  /**
   * @member {string} [description] Description of the status.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Reported.
 */
export interface Reported {
  /**
   * @member {any} [value] The current interface property value in a
   * digitalTwin.
   */
  value?: any;
  /**
   * @member {DesiredState} [desiredState]
   */
  desiredState?: DesiredState;
}

/**
 * @interface
 * An interface representing Desired.
 */
export interface Desired {
  /**
   * @member {any} [value] The desired value of the interface property to set
   * in a digitalTwin.
   */
  value?: any;
}

/**
 * @interface
 * An interface representing Property.
 */
export interface Property {
  /**
   * @member {Reported} [reported]
   */
  reported?: Reported;
  /**
   * @member {Desired} [desired]
   */
  desired?: Desired;
}

/**
 * @interface
 * An interface representing InterfaceModel.
 */
export interface InterfaceModel {
  /**
   * @member {string} [name] The name of digital twin interface, e.g.:
   * myThermostat.
   */
  name?: string;
  /**
   * @member {{ [propertyName: string]: Property }} [properties] List of all
   * properties in an interface.
   */
  properties?: { [propertyName: string]: Property };
}

/**
 * @interface
 * An interface representing DigitalTwinInterfaces.
 */
export interface DigitalTwinInterfaces {
  /**
   * @member {{ [propertyName: string]: InterfaceModel }} [interfaces]
   * Interface(s) data on the digital twin.
   */
  interfaces?: { [propertyName: string]: InterfaceModel };
  /**
   * @member {number} [version] Version of digital twin.
   */
  version?: number;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired.
 */
export interface DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired {
  /**
   * @member {any} [value] The desired value of the interface property to set
   * in a digitalTwin.
   */
  value?: any;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValuePropertiesValue.
 */
export interface DigitalTwinInterfacesPatchInterfacesValuePropertiesValue {
  /**
   * @member {DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired}
   * [desired]
   */
  desired?: DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValue.
 */
export interface DigitalTwinInterfacesPatchInterfacesValue {
  /**
   * @member {{ [propertyName: string]:
   * DigitalTwinInterfacesPatchInterfacesValuePropertiesValue }} [properties]
   * List of properties to update in an interface.
   */
  properties?: { [propertyName: string]: DigitalTwinInterfacesPatchInterfacesValuePropertiesValue };
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatch.
 */
export interface DigitalTwinInterfacesPatch {
  /**
   * @member {{ [propertyName: string]:
   * DigitalTwinInterfacesPatchInterfacesValue }} [interfaces] Interface(s)
   * data to patch in the digital twin.
   */
  interfaces?: { [propertyName: string]: DigitalTwinInterfacesPatchInterfacesValue };
}

/**
 * @interface
 * An interface representing IotHubGatewayServiceAPIs20190701PreviewOptions.
 * @extends ServiceClientOptions
 */
export interface IotHubGatewayServiceAPIs20190701PreviewOptions extends ServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}

/**
 * @interface
 * An interface representing DigitalTwinUpdateMultipleInterfacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinUpdateMultipleInterfacesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing DigitalTwinInvokeInterfaceCommandOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinInvokeInterfaceCommandOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {number} [responseTimeoutInSeconds] Response timeout in seconds.
   */
  responseTimeoutInSeconds?: number;
  /**
   * @member {number} [connectTimeoutInSeconds] Connect timeout in seconds.
   */
  connectTimeoutInSeconds?: number;
}

/**
 * @interface
 * An interface representing DigitalTwinGetDigitalTwinModelOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinGetDigitalTwinModelOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {boolean} [expand] Indicates whether to expand the device
   * capability model's interface definitions inline or not.
   * This query parameter ONLY applies to Capability model. Default value:
   * false .
   */
  expand?: boolean;
}

/**
 * @interface
 * An interface representing DigitalTwinGetAllInterfacesHeaders.
 * Defines headers for GetAllInterfaces operation.
 *
 */
export interface DigitalTwinGetAllInterfacesHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing DigitalTwinUpdateMultipleInterfacesHeaders.
 * Defines headers for UpdateMultipleInterfaces operation.
 *
 */
export interface DigitalTwinUpdateMultipleInterfacesHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing DigitalTwinGetSingleInterfaceHeaders.
 * Defines headers for GetSingleInterface operation.
 *
 */
export interface DigitalTwinGetSingleInterfaceHeaders {
  /**
   * @member {string} [eTag] ETag of the digital twin.
   */
  eTag: string;
}

/**
 * @interface
 * An interface representing DigitalTwinInvokeInterfaceCommandHeaders.
 * Defines headers for InvokeInterfaceCommand operation.
 *
 */
export interface DigitalTwinInvokeInterfaceCommandHeaders {
  /**
   * @member {string} [xMsRequestId] Correlation Id of the command request.
   */
  xMsRequestId: string;
  /**
   * @member {number} [xMsCommandStatuscode] Status code of command execution
   * result following HTTP status code schema.
   */
  xMsCommandStatuscode: number;
}

/**
 * @interface
 * An interface representing DigitalTwinGetDigitalTwinModelHeaders.
 * Defines headers for GetDigitalTwinModel operation.
 *
 */
export interface DigitalTwinGetDigitalTwinModelHeaders {
  /**
   * @member {string} [eTag] Etag of the model definition.
   */
  eTag: string;
  /**
   * @member {string} [xMsModelId] Id of the model returned.
   */
  xMsModelId: string;
}

/**
 * Contains response data for the getAllInterfaces operation.
 */
export type DigitalTwinGetAllInterfacesResponse = DigitalTwinInterfaces & DigitalTwinGetAllInterfacesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinGetAllInterfacesHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinInterfaces;
    };
};

/**
 * Contains response data for the updateMultipleInterfaces operation.
 */
export type DigitalTwinUpdateMultipleInterfacesResponse = DigitalTwinInterfaces & DigitalTwinUpdateMultipleInterfacesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinUpdateMultipleInterfacesHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinInterfaces;
    };
};

/**
 * Contains response data for the getSingleInterface operation.
 */
export type DigitalTwinGetSingleInterfaceResponse = DigitalTwinInterfaces & DigitalTwinGetSingleInterfaceHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinGetSingleInterfaceHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DigitalTwinInterfaces;
    };
};

/**
 * Contains response data for the invokeInterfaceCommand operation.
 */
export type DigitalTwinInvokeInterfaceCommandResponse = DigitalTwinInvokeInterfaceCommandHeaders & {
  /**
   * The parsed response body.
   */
  body: any;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinInvokeInterfaceCommandHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};

/**
 * Contains response data for the getDigitalTwinModel operation.
 */
export type DigitalTwinGetDigitalTwinModelResponse = DigitalTwinGetDigitalTwinModelHeaders & {
  /**
   * The parsed response body.
   */
  body: any;
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: DigitalTwinGetDigitalTwinModelHeaders;
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: any;
    };
};
